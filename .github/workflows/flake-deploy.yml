name: Deploy with Nix Flake

on:
  workflow_dispatch: # Manual trigger
  push:
    branches: [ main ] # Optional: automatically deploy on push to main

permissions:
  contents: write # Needed for GitHub Pages deployment

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Nix
        uses: cachix/install-nix-action@v22
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build with Nix Flake
        run: |
          echo "Building application using Nix flake..."

          # Build the default package from the flake
          nix build

          # Create deployment directory
          mkdir -p deploy

          # Check if the build produced output in the expected location
          if [ -d "result/public" ]; then
            echo "Build successful! Copying files from result/public/"
            cp -r result/public/* deploy/
          else
            echo "Checking alternative output path..."
            if [ -d "result" ] && [ -f "result/main.js" ] && [ -f "result/output.css" ]; then
              echo "Found files directly in result directory"
              cp -r result/* deploy/
            else
              echo "Build output structure is different than expected"
              # List the content of the result directory for debugging
              find result -type f | sort

              # Try running the build-all command from the flake
              echo "Trying build-all command from flake..."
              nix run .#build-all

              # Check for public directory in current directory
              if [ -d "public" ] && [ -f "public/main.js" ] && [ -f "public/output.css" ]; then
                echo "Found files in public directory after build-all"
                cp -r public/* deploy/
              else
                echo "ERROR: Could not find build output"
                exit 1
              fi
            fi
          fi

          # Ensure index.html exists
          if [ -f "public/index.html" ]; then
            # Copy existing index.html from repository
            cp public/index.html deploy/
          elif [ ! -f "deploy/index.html" ]; then
            # Create a minimal index.html file (line by line to avoid YAML issues)
            echo "<html>" > deploy/index.html
            echo "  <head>" >> deploy/index.html
            echo "    <title>Jellyfin Web Elm</title>" >> deploy/index.html
            echo "    <link href=\"output.css\" rel=\"stylesheet\">" >> deploy/index.html
            echo "    <script src=\"main.js\"></script>" >> deploy/index.html
            echo "  </head>" >> deploy/index.html
            echo "  <body>" >> deploy/index.html
            echo "    <div id=\"elm-app\"></div>" >> deploy/index.html
            echo "    <script>" >> deploy/index.html
            echo "      var app = Elm.Main.init({node: document.getElementById(\"elm-app\")});" >> deploy/index.html
            echo "    </script>" >> deploy/index.html
            echo "  </body>" >> deploy/index.html
            echo "</html>" >> deploy/index.html
          fi

          # Add .nojekyll file to prevent GitHub Pages from using Jekyll
          touch deploy/.nojekyll

          # List files for debugging
          echo "Files ready for deployment:"
          ls -la deploy/

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: deploy
          branch: gh-pages
          clean: true
